{
    "info": {
        "_postman_id": "6f18e543-b396-4d66-85b7-f537e07c247b",
        "name": "Brokerage API Tests",
        "description": "Test suite for the brokerage API endpoints, including edge cases",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
        "_exporter_id": "8367393"
    },
    "item": [
        {
            "name": "Authentication",
            "item": [
                {
                    "name": "Login - Valid Credentials",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has token\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data.token).to.not.be.undefined;",
                                    "    pm.environment.set(\"adminToken\", jsonData.data.token);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"admin\",\n    \"password\": \"admin\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "login"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Login - Invalid Credentials",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"admin\",\n    \"password\": \"wrongpassword\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "login"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Register - Valid Data",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has customer data\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data.id).to.not.be.undefined;",
                                    "    pm.expect(jsonData.data.username).to.include(\"newtestuser\");",
                                    "    ",
                                    "    // Save username for later tests",
                                    "    var username = jsonData.data.username;",
                                    "    pm.environment.set(\"testUsername\", username);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"newtestuser{{$timestamp}}\",\n    \"password\": \"password123\",\n    \"email\": \"test{{$timestamp}}@example.com\",\n    \"fullName\": \"Test User\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "register"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Register - Duplicate Username",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates duplicate username\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include(\"already exists\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"password123\",\n    \"email\": \"duplicate@example.com\",\n    \"fullName\": \"Duplicate User\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/register",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "register"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Login - New User",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Response has token\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data.token).to.not.be.undefined;",
                                    "    pm.environment.set(\"userToken\", jsonData.data.token);",
                                    "    ",
                                    "    // Save customer ID for later tests",
                                    "    pm.environment.set(\"testCustomerId\", jsonData.data.customer.id);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"username\": \"{{testUsername}}\",\n    \"password\": \"password123\"\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/auth/login",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "auth",
                                "login"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Order Management",
            "item": [
                {
                    "name": "Create Order - Valid Buy",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Order created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.id).to.not.be.undefined;",
                                    "    pm.expect(jsonData.data.status).to.equal(\"PENDING\");",
                                    "    ",
                                    "    // Save order ID for later tests",
                                    "    pm.environment.set(\"testOrderId\", jsonData.data.id);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"TRY\",\n    \"orderSide\": \"BUY\",\n    \"size\": 1.0,\n    \"price\": 100.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Order - Valid Sell",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Order created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.id).to.not.be.undefined;",
                                    "    pm.expect(jsonData.data.status).to.equal(\"PENDING\");",
                                    "    pm.expect(jsonData.data.orderSide).to.equal(\"SELL\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"TRY\",\n    \"orderSide\": \"SELL\",\n    \"size\": 0.5,\n    \"price\": 200.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Order - Invalid (Negative Size)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates invalid size\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"TRY\",\n    \"orderSide\": \"BUY\",\n    \"size\": -1.0,\n    \"price\": 100.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Order - Extra Large (Should Cause Insufficient Funds)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates insufficient funds\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.message).to.include(\"insufficient\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"TRY\",\n    \"orderSide\": \"BUY\",\n    \"size\": 100000.0,\n    \"price\": 100.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "List Orders - Default",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Orders list returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.orders).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "List Orders - Status Filter",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Only pending orders returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.orders).to.be.an('array');",
                                    "    ",
                                    "    jsonData.data.orders.forEach(function(order) {",
                                    "        pm.expect(order.status).to.equal(\"PENDING\");",
                                    "    });",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders?status=PENDING",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ],
                            "query": [
                                {
                                    "key": "status",
                                    "value": "PENDING"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Order by ID",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Correct order returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.id).to.equal(parseInt(pm.environment.get(\"testOrderId\")));",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders/{{testOrderId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{testOrderId}}"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Non-existent Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates order not found\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.message).to.include(\"not found\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders/999999",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "999999"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Cancel Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Order cancelled successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.id).to.equal(parseInt(pm.environment.get(\"testOrderId\")));",
                                    "    pm.expect(jsonData.data.status).to.equal(\"CANCELED\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders/{{testOrderId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{testOrderId}}"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Cancel Already Cancelled Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates order cannot be cancelled\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.message).to.include(\"Only pending orders\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders/{{testOrderId}}",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders",
                                "{{testOrderId}}"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Create Order - Buy MSFT",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"MSFT\",\n    \"orderSide\": \"BUY\",\n    \"size\": 2.0,\n    \"price\": 150.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    }
                },
                {
                    "name": "Match Order - Buy MSFT",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"orderId\": {{matchOrderId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/orders/match",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "orders",
                                "match"
                            ]
                        }
                    }
                },
                {
                    "name": "Create Order - Sell MSFT",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"MSFT\",\n    \"orderSide\": \"SELL\",\n    \"size\": 1.0,\n    \"price\": 160.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    }
                },
                {
                    "name": "Match Order - Sell MSFT",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"orderId\": {{matchOrderId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/orders/match",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "orders",
                                "match"
                            ]
                        }
                    }
                }
            ]
        },
        {
            "name": "Asset Management",
            "item": [
                {
                    "name": "List Assets",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Assets list returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.assets).to.be.an('array');",
                                    "    ",
                                    "    // Verify TRY asset exists",
                                    "    let tryAssetFound = false;",
                                    "    jsonData.data.assets.forEach(function(asset) {",
                                    "        if (asset.assetName === \"TRY\") {",
                                    "            tryAssetFound = true;",
                                    "        }",
                                    "    });",
                                    "    pm.expect(tryAssetFound).to.be.true;",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/assets",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "assets"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Specific Asset (TRY)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"TRY asset returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.assetName).to.equal(\"TRY\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/assets/TRY",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "assets",
                                "TRY"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Get Non-existent Asset",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 404\", function () {",
                                    "    pm.response.to.have.status(404);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates asset not found\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.message).to.include(\"not found\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/assets/NONEXISTENT",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "assets",
                                "NONEXISTENT"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Admin Operations",
            "item": [
                {
                    "name": "Create New Order For Matching",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Order created successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.id).to.not.be.undefined;",
                                    "    pm.expect(jsonData.data.status).to.equal(\"PENDING\");",
                                    "    ",
                                    "    // Save order ID for matching test",
                                    "    pm.environment.set(\"matchOrderId\", jsonData.data.id);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"TRY\",\n    \"orderSide\": \"BUY\",\n    \"size\": 1.0,\n    \"price\": 50.0\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "List All Pending Orders (Admin)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Pending orders list returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.orders).to.be.an('array');",
                                    "    ",
                                    "    jsonData.data.orders.forEach(function(order) {",
                                    "        pm.expect(order.status).to.equal(\"PENDING\");",
                                    "    });",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/orders/pending",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "orders",
                                "pending"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Match Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Order matched successfully\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data.id).to.equal(parseInt(pm.environment.get(\"matchOrderId\")));",
                                    "    pm.expect(jsonData.data.status).to.equal(\"MATCHED\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"orderId\": {{matchOrderId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/orders/match",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "orders",
                                "match"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Match Already Matched Order",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 400\", function () {",
                                    "    pm.response.to.have.status(400);",
                                    "});",
                                    "",
                                    "pm.test(\"Error message indicates already matched\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.false;",
                                    "    pm.expect(jsonData.message).to.include(\"Only pending orders\");",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"orderId\": {{matchOrderId}}\n}"
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/orders/match",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "orders",
                                "match"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "List All Customers (Admin)",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 200\", function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test(\"Customers list returned\", function () {",
                                    "    var jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.be.true;",
                                    "    pm.expect(jsonData.data).to.be.an('array');",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/customers",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "customers"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Add Asset to Customer (Admin)",
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "application/json",
                                "type": "text"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{adminToken}}",
                                "type": "text"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"assetName\": \"TRY\",\n    \"initialSize\": 10000.0\n}",
                            "options": {
                                "raw": {
                                    "language": "json"
                                }
                            }
                        },
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/customers/assets?customerId={{testCustomerId}}\n",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "customers",
                                "assets"
                            ],
                            "query": [
                                {
                                    "key": "customerId",
                                    "value": "{{testCustomerId}}\n"
                                }
                            ]
                        }
                    },
                    "response": []
                }
            ]
        },
        {
            "name": "Security Tests",
            "item": [
                {
                    "name": "Access Protected Endpoint Without Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Access Admin Endpoint With Regular User Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 403\", function () {",
                                    "    pm.response.to.have.status(403);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{userToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/admin/customers",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "admin",
                                "customers"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "Access With Invalid Token",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "type": "text/javascript",
                                "exec": [
                                    "pm.test(\"Status code is 401\", function () {",
                                    "    pm.response.to.have.status(401);",
                                    "});"
                                ]
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer invalid.token.here"
                            }
                        ],
                        "url": {
                            "raw": "{{baseUrl}}/api/orders",
                            "host": [
                                "{{baseUrl}}"
                            ],
                            "path": [
                                "api",
                                "orders"
                            ]
                        }
                    },
                    "response": []
                }
            ]
        }
    ],
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        },
        {
            "listen": "test",
            "script": {
                "type": "text/javascript",
                "exec": [
                    ""
                ]
            }
        }
    ],
    "variable": [
        {
            "key": "baseUrl",
            "value": "http://localhost:8080",
            "type": "string"
        }
    ]
}